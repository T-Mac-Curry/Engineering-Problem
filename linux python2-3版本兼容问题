virtualenvwrapper是管理Python虚拟环境的工具，可以很方便的为不同的项目建立独立的环境，每个项目都可以安装自己的依赖，同时也支持在不同的虚拟环境中存在不同版本的Python。

1.安装virtualenvwrapper
pip install virtualenvwrapper
2. 创建虚拟环境
当你需要使用Python2开发项目时，建立一个Python2的虚拟环境：
virtualenv -p /usr/bin/python2.7 env27

当你需要使用Python3开发项目时，建立一个Python3的虚拟环境：
virtualenv -p /usr/bin/python3.6 env36

3. 启动虚拟环境
python2:
新创建的虚拟环境目录中有一个启动脚本 env27/bin/activate ，直接使用 source 命令来启动虚拟环境。
$ source env27/bin/activate

python3:
新创建的虚拟环境目录中有一个启动脚本 env36/bin/activate ，直接使用 source 命令来启动虚拟环境。
$ source env36/bin/activate

4. 退出虚拟环境
退出当前虚拟环境使用 deactivate 命令。
$ deactivate

5 安装 virtualenvwrapper 扩展包
$ pip install virtualenvwrapper 

此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，里面有安装步骤，我们照着操作把环境设置好。
创建存放虚拟环境的目录
# $HOME是用户主目录
$ mkdir $HOME/.virtualenvs

进入 用户主目录，打开 .bashrc 文件，添加如下代码：
export WORKON_HOME=$HOME/.virtualenvs
#export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh

WORKON_HOME： 告诉 virtualenvwrapper 在哪里放置你的虚拟环境，默认是在 $HOME/.virtualenvs 目录下。如果这个目录不存在，virtualenvwrapper 运行的时候会自动创建它。
PROJECT_HOME ：告诉virtualenvwrapper在哪里存放你的项目的工作目录

当你需要使用Python2开发项目时，建立一个Python2的虚拟环境：

$ mkvirtualenv -p /usr/bin/python2 env27
当你需要Python3开发时：

$ mkvirtualenv -p /usr/bin/python3.4 env34
然后可以随时切换不同的虚拟环境：

$ workon env27  # 进入Python2环境
$ workon env36  # 进入Python3环境
更爽的是，你可以在进入虚拟环境的同时切换到项目目录，只需要编辑 $VIRTUAL_ENV/bin/postactivate 这个文件即可：

$ vim $VIRTUAL_ENV/bin/postactivate  #前提是已经进入对应的虚拟环境
在文件中添加切换目录的命令：
cd  /path/to/your/project




参考：
链接：https://www.jianshu.com/p/ae40472ac925
